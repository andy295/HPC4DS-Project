 --- ENCODING

split text for each processor, 
calculate frequencies individually

join frequencies and sum 

global huffman tree -> no parallelization can be applied

keep global tree and split again 
for each process encode the sequence

"Using such parallel
encoding assumes alignment at block boundaries, so that
some bits may be lost at the end of each block"

this means that we need to decide block size, 
have padding bits to fill the space, 
and also have an END_OF_BLOCK sequence, 
since padding bits may be decodable (error in decoding)

- proposal for the encoding steps -

1_ create a copy of the original text and apply a sorting algorithm on the copy (parallel application)
2_ once we have the sorted text, split it and calculate the frequencies of each symbol (parallel application)
3_ create a global huffman tree (serial application)
4_ split the text again and encode each part (parallel application) 

- notes on the encoding -
- we can assume there is just one \0 character for text, during the sorting step we can ignore all the \0 characters, if many are present
    we can add just one at the end of the text, in this way during the point 3, we can create a codeword for the \0 character
- with L the length of the text and N the number of processors, we can assume that M = L/N is the length of substring for each processor
    for all the substrings, except for the last one, we can check if the last character is the same as the first character of the next substring
    if yes we have to find where the character change, in this way different processes can have substrings with different lengths
    if no we can use N as splitting point for that couple of substrings
- during the execution of point 4, each process could count the number of informative bits into the last byte, in this way the main process can know how many 
    bits are valid in the last byte of the encoded text
    or it can count the total number of informative bits and we can calculate the number of bits in the last byte by doing a subraction

 --- DECODING

let processor i decode block i 
then continue till sync point is reached 
and pass the decoded sequence for joining

in the meantime, processor i+1 has started decoding of block i+1
but from the sync point 
(so we have to pass through the sequence first and check sync presence 
in first block (i guess))

- notes on the decoding -

paper "Gil Goldshlager Final Paper" presents a possible solution for the decoding